{
	"headtext": "WORK SAMPLES",
	"bodytext": "Projects and Features",
	"subtext": "For logins, you can use <bold>guest id: xxxx, pw: xxxx</bold>",
	"data": [
		{
			"title": "Canvas Drawing Tool in Webcam with Hand Detections",
			"description": "5 hand configurations (1) to draw, (2) to move position, (3) configure the brush size, (4) to set the brush RGB colors separately, and (5) to erase",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/code_snippets/blob/main/backend_ml_detects_hands.py",
			"videoUrl": "https://www.youtube.com/watch?v=EPSyEdOLbpE",
			"imgs": [],
			"tech": ["python", "opencv", "tensorflow", "mediapipe"]
		},
		{
			"title": "Object Detections (3D) in Webcam with Objectron",
			"description": "The model detects better in certain views than others e.g. shoe side vs. front views, cup upright vs. upside down. It looks like object position/orientation does affect detection. Detections in the webcam are much more consistent. Surprisingly, the slipper was detected, under the shoe class.",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/code_snippets/blob/main/backend_ml_detects_objects3d.py",
			"videoUrl": "https://www.youtube.com/watch?v=PGsjsONRJCs",
			"imgs": [],
			"tech": ["python", "opencv", "tensorflow", "mediapipe"]
		},
		{
			"title": "Object Detections (3D) Test in Video with Objectron (for cups, chairs, shoes, cameras)",
			"description": "Not all objects in the scene were detected, but some successful ones were there.",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/code_snippets/blob/main/backend_ml_detects_objects3d.py",
			"videoUrl": "https://www.youtube.com/watch?v=AAKrcxfZMxI",
			"imgs": [],
			"tech": ["python", "opencv", "tensorflow", "mediapipe"]
		},
		{
			"title": "Object Detections (3D) Failed Attempt with Objectron (for cups, chairs)",
			"description": "Attempts were made to identify ambiguous areas where cups are upside down and chairs are only partially visible. Though the confidence minimum was set low, the position and scene lighting might have been an overbearing factor for any detection here.",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/code_snippets/blob/main/backend_ml_detects_objects3d.py",
			"videoUrl": "https://www.youtube.com/watch?v=5h1sbNn_ZBk",
			"imgs": [],
			"tech": ["python", "opencv", "tensorflow", "mediapipe"]
		},
		{
			"title": "Face/Hand Detections and Image Manipulations Web App Webcam",
			"description": "Face and hand detections from pre-boxed tensorflow-mediapipe face, hand and finger models",
			"pageurl": "https://tfwebapp-nehmhudbya-pd.a.run.app/",
			"sourceurl": "https://github.com/o1123pq/tfwebapp",
			"videoUrl": "",
			"imgs": "webcamdetections.png",
			"tech": ["reactjs", "mediapipe", "firebase", "canvas", "tensorflow", "docker", "googlecloudrun"]
		},
		{
			"title": "Object Detection with Custom Cookie Monster Model",
			"description": "Trained a Cookie Monster model (with ~100 images) on a freemium Google Cloud account. There were no detections on Sesame Street videos but there were detections on some test images (with erratic confidence).<br/><br/>It makes sense as more than half of the images labeled were of TOYS; which hadn't occurred to me before since the Cookie Monster is also somewhat a toy. However&#44; with this understanding (and since this would take a bunch of more hours&#44; to label images from the actual videos)&#44; I will call it a day and say this was a success.<br/><br/>Inputs matter. And we need more images of the Cookie Monster.",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/code_snippets/blob/main/backend_ml_detects_objects.py",
			"videoUrl": "",
			"imgs": ["./cm (1).jpg", "./cm (2).jpg", "./cm (1).png", "./cm (2).png", "./cm (3).png", "./cm (4).png", "./cm (5).png"],
			"tech": ["python", "tensorflow", "opencv", "darknet framework, yolov3", "chrome extensions"]
		},
		{
			"title": "Object Detection with Imported Models",
			"description": "Out of curiosity, applied custom helmet, motorcycle models again",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/code_snippets/blob/main/backend_ml_detects_objects.py",
			"videoUrl": "https://www.youtube.com/watch?v=AgZm7g3a62s",
			"imgs": [],
			"tech": ["python", "tensorflow", "opencv", "darknet framework, yolov3"]
		},
		{
			"title": "Object Detection with imported models",
			"description": "Applied custom helmet, motorcycle models (from ~700 images) created by user Savan Agrawal on Kaggle.",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/code_snippets/blob/main/backend_ml_detects_objects.py",
			"videoUrl": "https://www.youtube.com/watch?v=3KUfnZ9eNEY",
			"imgs": [],
			"tech": ["python", "tensorflow", "opencv", "darknet framework, yolov3"]
		},
		{
			"title": "Object Detection with imported COCO models",
			"description": "Applied COCO models again to real life scene.",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/code_snippets/blob/main/backend_ml_detects_objects.py",
			"videoUrl": "https://www.youtube.com/watch?v=8dfD9zJH0Zo",
			"imgs": [],
			"tech": ["python", "tensorflow", "opencv", "darknet framework, yolov3"]
		},
		{
			"title": "Object Detection with imported COCO models",
			"description": "Applied COCO models to Michael Scott.",
			"pageurl": "",
			"sourceurl": "",
			"videoUrl": "https://www.youtube.com/watch?v=UVBVUOlQj_U",
			"imgs": [],
			"tech": ["python", "tensorflow", "opencv", "darknet framework, yolov3"]
		},

		{
			"title": "News Scraper / Scraping Web App",
			"description": "A mockup service that scrapes news articles for a search topic",
			"pageurl": "https://scrv1-swds45lcrq-nn.a.run.app/",
			"sourceurl": "https://github.com/o1123pq/scraper",
			"videoUrl": "",
			"imgs": "scraper.png",
			"tech": ["nodejs", "reactjs", "nextjs", "firebase", "puppeteer", "docker", "googlecloudrun"]
		},
		{
			"title": "[code snippet] Extracting NLP data classes for use",
			"description": "",
			"pageurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_requests_spacy.py",
			"sourceurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_requests_spacy.py",
			"videoUrl": "",
			"imgs": ["sc (1).jpg"],
			"tech": ["python", "numpy", "pandas", "spacy"]
		},
		{
			"title": "[code snippet] Pre-processing data for Matplotlib Visualization",
			"description": "Data is preprocessed before plotting.",
			"pageurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_ml_plots.py",
			"sourceurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_ml_plots.py",
			"videoUrl": "",
			"imgs": ["sc (1).jpg"],
			"tech": ["python", "numpy", "pandas", "matplotlib"]
		},
		{
			"title": "[code snippet] Training ML weights",
			"description": "",
			"pageurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_ml_weights.py",
			"sourceurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_ml_weights.py",
			"videoUrl": "",
			"imgs": ["sc (1).jpg"],
			"tech": ["python", "numpy", "pandas"]
		},
		{
			"title": "[code snippet] Scraping Data with Selenium",
			"description": "Scraping data from various sources.",
			"pageurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_scrapes_selenium.py",
			"sourceurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_scrapes_selenium.py",
			"videoUrl": "",
			"imgs": ["sc (1).jpg"],
			"tech": ["python", "numpy", "pandas", "selenium"]
		},
		{
			"title": "[code snippet] Requesting data",
			"description": "Requesting data for multiple endpoints from the same API source/vendor.",
			"pageurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_requests_vendorapi.py",
			"sourceurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_requests_vendorapi.py",
			"videoUrl": "",
			"imgs": ["sc (1).jpg"],
			"tech": ["python", "numpy", "pandas"]
		},
		{
			"title": "Architectural Parametric Design and 3D Renderings",
			"description": "Castle style home designed parametrically with Revit components.",
			"pageurl": "",
			"sourceurl": "",
			"videoUrl": "",
			"imgs": ["a (1).jpg", "a (2).jpg", "a (3).jpg"],
			"tech": ["revit", "maxwell render"]
		}
	]
}
