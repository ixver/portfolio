{
	"headtext": "WORK SAMPLES",
	"bodytext": "Projects and Features",
	"subtext": "For logins, you can use <bold>guest id: xxxx, pw: xxxx</bold>",
	"data": [
		{
			"title": "Webcam Canvas Drawing Tool with Hand Detections",
			"description": "Uses 5 hand configurations, to draw, move position, configure the brush size, configure the brush color, or erase on a canvas.",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/",
			"videoUrl": "https://youtu.be/EPSyEdOLbpE",
			"imgs": [],
			"tech": ["python", "opencv", "tensorflow", "mediapipe"]
		},
		{
			"title": "Webcam 3D Object Detection with Objectron",
			"description": "he model does not detect the shoe when viewed straight on, or cups when upside down. It looks like object position/orientation does affect detection. And detections in the webcam are much more consistent. Surprisingly, the slipper was detected, under the shoe class.",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/",
			"videoUrl": "",
			"imgs": [],
			"tech": ["python", "opencv", "tensorflow", "mediapipe"]
		},
		{
			"title": "Video 3D Object Detection Test with Objectron (for cups, chairs, shoes, cameras)",
			"description": "Not all objects in the scene were detected, but some successful ones were there.",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/",
			"videoUrl": "https://youtu.be/AAKrcxfZMxI",
			"imgs": [],
			"tech": ["python", "opencv", "tensorflow", "mediapipe"]
		},
		{
			"title": "Video 3D Object Detection Fail with Objectron (for cups, chairs)",
			"description": "Objectron model attempts to identify ambiguous areas where cups are upside down and chairs are only partially visible. Even with a low minimum confidence setting, the position and scene lighting might be an overbearing factor for detection in this case.",
			"pageurl": "",
			"sourceurl": "https://github.com/o1123pq/",
			"videoUrl": "https://youtu.be/5h1sbNn_ZBk",
			"imgs": [],
			"tech": ["python", "opencv", "tensorflow", "mediapipe"]
		},
		{
			"title": "Face/Hand Detections and image manipulations on webcam",
			"description": "Face and hand detections from pre-boxed tensorflow-mediapipe face, hand and finger models",
			"pageurl": "https://tfwebapp-nehmhudbya-pd.a.run.app/",
			"sourceurl": "https://github.com/o1123pq/tfwebapp",
			"videoUrl": "",
			"imgs": ["facemesh (1).png", "facemesh (2).png", "facemesh (3).png"],
			"tech": ["reactjs", "mediapipe", "firebase", "canvas", "tensorflow", "docker", "googlecloudrun"]
		},
		{
			"title": "Object Detection with custom Cookie Monster model",
			"description": "Trained a Cookie Monster model (with ~100 images) on a freemium Google Cloud account. There were no detections on Sesame Street videos but there were detections on some test images (with erratic confidence).<br/><br/>It makes sense as more than half of the images labeled were of TOYS; which hadn't occurred to me before since the Cookie Monster is also somewhat a toy. However&#44; with this understanding (and since this would take a bunch of more hours&#44; to label images from the actual videos)&#44; I will call it a day and say this was a success.<br/><br/>Inputs matter. And we need more images of the Cookie Monster.",
			"pageurl": "",
			"sourceurl": "",
			"videoUrl": "",
			"imgs": ["./cm (1).jpg", "./cm (2).jpg", "./cm (1).png", "./cm (2).png", "./cm (3).png", "./cm (4).png", "./cm (5).png"],
			"tech": ["python", "tensorflow", "opencv", "darknet framework, yolov3", "chrome extensions"]
		},
		{
			"title": "Object Detection with imported models",
			"description": "Out of curiosity, applied custom helmet, motorcycle models again",
			"pageurl": "",
			"sourceurl": "",
			"videoUrl": "https://www.youtube.com/watch?v=AgZm7g3a62s",
			"imgs": [],
			"tech": ["python", "tensorflow", "opencv", "darknet framework, yolov3"]
		},
		{
			"title": "Object Detection with imported models",
			"description": "Applied custom helmet, motorcycle models (from ~700 images) created by user Savan Agrawal on Kaggle.",
			"pageurl": "",
			"sourceurl": "",
			"videoUrl": "https://www.youtube.com/watch?v=3KUfnZ9eNEY",
			"imgs": [],
			"tech": ["python", "tensorflow", "opencv", "darknet framework, yolov3"]
		},
		{
			"title": "Object Detection with imported COCO models",
			"description": "Applied COCO models again to real life scene.",
			"pageurl": "",
			"sourceurl": "",
			"videoUrl": "https://www.youtube.com/watch?v=8dfD9zJH0Zo",
			"imgs": [],
			"tech": ["python", "tensorflow", "opencv", "darknet framework, yolov3"]
		},
		{
			"title": "Object Detection with imported COCO models",
			"description": "Applied COCO models to Michael Scott.",
			"pageurl": "",
			"sourceurl": "",
			"videoUrl": "https://www.youtube.com/watch?v=UVBVUOlQj_U",
			"imgs": [],
			"tech": ["python", "tensorflow", "opencv", "darknet framework, yolov3"]
		},

		{
			"title": "News Scraper",
			"description": "A mockup service that scrapes news articles for a search topic",
			"pageurl": "https://www.github.com/",
			"sourceurl": "https://www.github.com/",
			"videoUrl": "",
			"imgs": [""],
			"tech": ["nodejs", "reactjs", "nextjs", "firebase", "puppeteer", "docker", "googlecloudrun"]
		},
		{
			"title": "[code snippet] Extracting NLP data classes",
			"description": "",
			"pageurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_requests_spacy.py",
			"sourceurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_requests_spacy.py",
			"videoUrl": "",
			"imgs": ["sc (1).jpg"],
			"tech": ["python", "numpy", "pandas", "spacy"]
		},
		{
			"title": "[code snippet] Plotting pre-processed data",
			"description": "Data is preprocessed before plotting.",
			"pageurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_ml_plots.py",
			"sourceurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_ml_plots.py",
			"videoUrl": "",
			"imgs": ["sc (1).jpg"],
			"tech": ["python", "numpy", "pandas", "matplotlib"]
		},
		{
			"title": "[code snippet] Scraping Data with Selenium",
			"description": "Scraping data from various sources.",
			"pageurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_scrapes_selenium.py",
			"sourceurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_scrapes_selenium.py",
			"videoUrl": "",
			"imgs": ["sc (1).jpg"],
			"tech": ["python", "numpy", "pandas", "selenium"]
		},
		{
			"title": "[code snippet] Requesting data",
			"description": "Requesting data for multiple endpoints from the same API source/vendor.",
			"pageurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_requests_vendorapi.py",
			"sourceurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_requests_vendorapi.py",
			"videoUrl": "",
			"imgs": ["sc (1).jpg"],
			"tech": ["python", "numpy", "pandas"]
		},
		{
			"title": "Architectural",
			"description": "Castle style home designed parametrically with Revit components.",
			"pageurl": "",
			"sourceurl": "",
			"videoUrl": "",
			"imgs": ["a (1).jpg", "a (2).jpg", "a (3).jpg"],
			"tech": ["revit", "maxwell render"]
		}
	]
}

// {
// 	"title": "[code snippet] Training ML weights",
// 	"description": "",
// 	"pageurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_ml_weights.py",
// 	"sourceurl": "https://www.github.com/o1123pq/codesnippets/blob/main/backend_ml_weights.py",
// 	"videoUrl": "",
// 	"imgs": ["sc (1).jpg"],
// 	"tech": ["python", "numpy", "pandas"]
// },
